// Code generated by MockGen. DO NOT EDIT.
// Source: achieve.trpc.go
//
// Generated by this command:
//
//	mockgen -source=achieve.trpc.go -destination=mock/achieve.trpc.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	achieve "github.com/Andrew-M-C/trpc-go-demo/proto/achieve"
	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockAchievementService is a mock of AchievementService interface.
type MockAchievementService struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementServiceMockRecorder
	isgomock struct{}
}

// MockAchievementServiceMockRecorder is the mock recorder for MockAchievementService.
type MockAchievementServiceMockRecorder struct {
	mock *MockAchievementService
}

// NewMockAchievementService creates a new mock instance.
func NewMockAchievementService(ctrl *gomock.Controller) *MockAchievementService {
	mock := &MockAchievementService{ctrl: ctrl}
	mock.recorder = &MockAchievementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementService) EXPECT() *MockAchievementServiceMockRecorder {
	return m.recorder
}

// GetUserBadges mocks base method.
func (m *MockAchievementService) GetUserBadges(ctx context.Context, req *achieve.GetUserBadgesRequest) (*achieve.GetUserBadgesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserBadges", ctx, req)
	ret0, _ := ret[0].(*achieve.GetUserBadgesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBadges indicates an expected call of GetUserBadges.
func (mr *MockAchievementServiceMockRecorder) GetUserBadges(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBadges", reflect.TypeOf((*MockAchievementService)(nil).GetUserBadges), ctx, req)
}

// GetUserReputation mocks base method.
func (m *MockAchievementService) GetUserReputation(ctx context.Context, req *achieve.GetUserReputationRequest) (*achieve.GetUserReputationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserReputation", ctx, req)
	ret0, _ := ret[0].(*achieve.GetUserReputationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReputation indicates an expected call of GetUserReputation.
func (mr *MockAchievementServiceMockRecorder) GetUserReputation(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReputation", reflect.TypeOf((*MockAchievementService)(nil).GetUserReputation), ctx, req)
}

// MockAchievementClientProxy is a mock of AchievementClientProxy interface.
type MockAchievementClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementClientProxyMockRecorder
	isgomock struct{}
}

// MockAchievementClientProxyMockRecorder is the mock recorder for MockAchievementClientProxy.
type MockAchievementClientProxyMockRecorder struct {
	mock *MockAchievementClientProxy
}

// NewMockAchievementClientProxy creates a new mock instance.
func NewMockAchievementClientProxy(ctrl *gomock.Controller) *MockAchievementClientProxy {
	mock := &MockAchievementClientProxy{ctrl: ctrl}
	mock.recorder = &MockAchievementClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementClientProxy) EXPECT() *MockAchievementClientProxyMockRecorder {
	return m.recorder
}

// GetUserBadges mocks base method.
func (m *MockAchievementClientProxy) GetUserBadges(ctx context.Context, req *achieve.GetUserBadgesRequest, opts ...client.Option) (*achieve.GetUserBadgesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserBadges", varargs...)
	ret0, _ := ret[0].(*achieve.GetUserBadgesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserBadges indicates an expected call of GetUserBadges.
func (mr *MockAchievementClientProxyMockRecorder) GetUserBadges(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserBadges", reflect.TypeOf((*MockAchievementClientProxy)(nil).GetUserBadges), varargs...)
}

// GetUserReputation mocks base method.
func (m *MockAchievementClientProxy) GetUserReputation(ctx context.Context, req *achieve.GetUserReputationRequest, opts ...client.Option) (*achieve.GetUserReputationResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserReputation", varargs...)
	ret0, _ := ret[0].(*achieve.GetUserReputationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserReputation indicates an expected call of GetUserReputation.
func (mr *MockAchievementClientProxyMockRecorder) GetUserReputation(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserReputation", reflect.TypeOf((*MockAchievementClientProxy)(nil).GetUserReputation), varargs...)
}
