// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: achieve.proto

package achieve

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// AchievementService defines service.
type AchievementService interface {
	GetUserReputation(ctx context.Context, req *GetUserReputationRequest) (*GetUserReputationResponse, error)

	GetUserBadges(ctx context.Context, req *GetUserBadgesRequest) (*GetUserBadgesResponse, error)
}

func AchievementService_GetUserReputation_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &GetUserReputationRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AchievementService).GetUserReputation(ctx, reqbody.(*GetUserReputationRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

func AchievementService_GetUserBadges_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &GetUserBadgesRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(AchievementService).GetUserBadges(ctx, reqbody.(*GetUserBadgesRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// AchievementServer_ServiceDesc descriptor for server.RegisterService.
var AchievementServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.demo.achieve.Achievement",
	HandlerType: ((*AchievementService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.demo.achieve.Achievement/GetUserReputation",
			Func: AchievementService_GetUserReputation_Handler,
		},
		{
			Name: "/trpc.demo.achieve.Achievement/GetUserBadges",
			Func: AchievementService_GetUserBadges_Handler,
		},
	},
}

// RegisterAchievementService registers service.
func RegisterAchievementService(s server.Service, svr AchievementService) {
	if err := s.Register(&AchievementServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("Achievement register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedAchievement struct{}

func (s *UnimplementedAchievement) GetUserReputation(ctx context.Context, req *GetUserReputationRequest) (*GetUserReputationResponse, error) {
	return nil, errors.New("rpc GetUserReputation of service Achievement is not implemented")
}
func (s *UnimplementedAchievement) GetUserBadges(ctx context.Context, req *GetUserBadgesRequest) (*GetUserBadgesResponse, error) {
	return nil, errors.New("rpc GetUserBadges of service Achievement is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// AchievementClientProxy defines service client proxy
type AchievementClientProxy interface {
	GetUserReputation(ctx context.Context, req *GetUserReputationRequest, opts ...client.Option) (rsp *GetUserReputationResponse, err error)

	GetUserBadges(ctx context.Context, req *GetUserBadgesRequest, opts ...client.Option) (rsp *GetUserBadgesResponse, err error)
}

type AchievementClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewAchievementClientProxy = func(opts ...client.Option) AchievementClientProxy {
	return &AchievementClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *AchievementClientProxyImpl) GetUserReputation(ctx context.Context, req *GetUserReputationRequest, opts ...client.Option) (*GetUserReputationResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.demo.achieve.Achievement/GetUserReputation")
	msg.WithCalleeServiceName(AchievementServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("demo")
	msg.WithCalleeServer("achieve")
	msg.WithCalleeService("Achievement")
	msg.WithCalleeMethod("GetUserReputation")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &GetUserReputationResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

func (c *AchievementClientProxyImpl) GetUserBadges(ctx context.Context, req *GetUserBadgesRequest, opts ...client.Option) (*GetUserBadgesResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.demo.achieve.Achievement/GetUserBadges")
	msg.WithCalleeServiceName(AchievementServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("demo")
	msg.WithCalleeServer("achieve")
	msg.WithCalleeService("Achievement")
	msg.WithCalleeMethod("GetUserBadges")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &GetUserBadgesResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
