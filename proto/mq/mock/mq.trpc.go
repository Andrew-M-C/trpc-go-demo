// Code generated by MockGen. DO NOT EDIT.
// Source: mq.trpc.go
//
// Generated by this command:
//
//	mockgen -source=mq.trpc.go -destination=mock/mq.trpc.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	mq "github.com/Andrew-M-C/trpc-go-demo/proto/mq"
	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockMQService is a mock of MQService interface.
type MockMQService struct {
	ctrl     *gomock.Controller
	recorder *MockMQServiceMockRecorder
	isgomock struct{}
}

// MockMQServiceMockRecorder is the mock recorder for MockMQService.
type MockMQServiceMockRecorder struct {
	mock *MockMQService
}

// NewMockMQService creates a new mock instance.
func NewMockMQService(ctrl *gomock.Controller) *MockMQService {
	mock := &MockMQService{ctrl: ctrl}
	mock.recorder = &MockMQServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMQService) EXPECT() *MockMQServiceMockRecorder {
	return m.recorder
}

// TestMQAdd mocks base method.
func (m *MockMQService) TestMQAdd(ctx context.Context, req *mq.TestMQAddRequest) (*mq.TestMQAddResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestMQAdd", ctx, req)
	ret0, _ := ret[0].(*mq.TestMQAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestMQAdd indicates an expected call of TestMQAdd.
func (mr *MockMQServiceMockRecorder) TestMQAdd(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMQAdd", reflect.TypeOf((*MockMQService)(nil).TestMQAdd), ctx, req)
}

// MockMQClientProxy is a mock of MQClientProxy interface.
type MockMQClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockMQClientProxyMockRecorder
	isgomock struct{}
}

// MockMQClientProxyMockRecorder is the mock recorder for MockMQClientProxy.
type MockMQClientProxyMockRecorder struct {
	mock *MockMQClientProxy
}

// NewMockMQClientProxy creates a new mock instance.
func NewMockMQClientProxy(ctrl *gomock.Controller) *MockMQClientProxy {
	mock := &MockMQClientProxy{ctrl: ctrl}
	mock.recorder = &MockMQClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMQClientProxy) EXPECT() *MockMQClientProxyMockRecorder {
	return m.recorder
}

// TestMQAdd mocks base method.
func (m *MockMQClientProxy) TestMQAdd(ctx context.Context, req *mq.TestMQAddRequest, opts ...client.Option) (*mq.TestMQAddResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TestMQAdd", varargs...)
	ret0, _ := ret[0].(*mq.TestMQAddResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestMQAdd indicates an expected call of TestMQAdd.
func (mr *MockMQClientProxyMockRecorder) TestMQAdd(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestMQAdd", reflect.TypeOf((*MockMQClientProxy)(nil).TestMQAdd), varargs...)
}
